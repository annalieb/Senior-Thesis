# use lambda = 0, --> apply a log transformation
model2 <- lm(log(Brain_Weight)~Body_Weight_kg, data=animals)
summary(model2)
summary(model1)
summary(model2)
# 2f
model3 <- lm(log(Brain_Weight)~log(Body_Weight_kg), data=animals)
summary(model3)
plot(model3)
# 2h
# scatter plot for part f
plot(log(Body_Weight_kg), log(Brain_Weight))
# 2h
# scatter plot for part f
plot(log(animals$Body_Weight_kg), log(animals$Brain_Weight))
abline(model3)
plot(animals$Body_Weight_kg, log(animals$Brain_Weight))
abline(model2)
plot(log(animals$Body_Weight_kg), log(animals$Brain_Weight))
abline(model3)
animals$Species_Code
# 2h
plot(log(animals$Body_Weight_kg),
log(animals$Brain_Weight),
col=animals$Species_Code)
# 2h
plot(log(animals$Body_Weight_kg),
log(animals$Brain_Weight),
pch=animals$Species_Code)
# 2h
plot(log(animals$Body_Weight_kg),
log(animals$Brain_Weight),
pch=(animals$Species_Code + 20))
abline(model3)
# y ~ x2 + x4 + x6 + x7 + x10 + x4:x10 + x7:x10 + x4:x6
vifstep(x=chem[, c(2, 4, 6, 7, 10)], th=10)
# Question 1
# 1a
chem <- read.table(file.choose(),header=TRUE)
chem_lm <- lm(y~., data=chem)
summary(chem_lm)
# x5 is excluded: perfect linear collinearity with another var
summary(lm(x5~., data=chem))
mydata.new <- chem[, -c(5)]
all_subset_Cp = leaps(x=mydata.new[, -11], y=mydata.new$y, method="Cp")
ind <- which.min(all_subset_Cp$Cp)
ind
mydata.new <- chem[, -5]
all_subset_Cp = leaps(x=mydata.new[, -11], y=mydata.new$y, method="Cp")
ind <- which.min(all_subset_Cp$Cp)
ind
all_subset_Cp$which[ind,]
names(mydata.new[, -11])
all_subset_Cp = leaps(x=mydata.new[, -10], y=mydata.new$y, method="Cp")
ind <- which.min(all_subset_Cp$Cp)
ind
all_subset_Cp$which[ind,]
names(mydata.new[, -10])
best_model <- lm(y~x1+x2+x3+x10, data=mydata.new)
summary(best_model)
names(mydata.new)
attach(mydata.new)
all_subset_Cp = leaps(x=mydata.new[, -10], y=y, method="Cp")
ind <- which.min(all_subset_Cp$Cp)
ind
all_subset_Cp$which[ind,]
# check residual plot
plot(best_model)
boxcox(best_model_2)
boxcox(best_model)
# transform with lambda = -1
range(mydata.new$y) # y-var is strictly positive
boxcox(best_model)
# transform with lambda = -1
range(mydata.new$y) # y-var is strictly positive
anova(best_model)
mydata.new$y <- mydata.new$y^(-1)
final_model <- lm(y~x1+x2+x3+x10, data = chem_transformed)
final_model <- lm(y~x1+x2+x3+x10, data = mydata.new)
which.max(mydata.new$y)
which.max(chem$y)
# 2c
scatter.smooth(residuals(model1)~predict(model1))
# Question 2
animals <- read.csv(file.choose(),header=TRUE)
# 2a
animals$Body_Weight_kg <- animals$Body_Weight / 1000
# light_animals <- animals[animals$Body_Weight_kg < 1000, ]
plot(animals$Body_Weight_kg, animals$Brain_Weight)
plot(animals$Body_Weight_kg, animals$Brain_Weight,
xlim=(400, 500), ylim=(-500, 1500))
plot(animals$Body_Weight_kg, animals$Brain_Weight,
xlim=c(400, 500), ylim=c(-500, 1500))
# hard to assess the relationship without performing transformation
plot(animals$Body_Weight_kg, animals$Brain_Weight,
xlim=c(0, 500), ylim=c(0, 1500))
model1 <- lm(Brain_Weight~Body_Weight_kg, data=animals)
abline(model1)
summary(model1)
scatter.smooth(residuals(model1)~predict(model1),
xlim=c(400, 500), ylim=c(-500, 1500))
# 2c
scatter.smooth(residuals(model1)~predict(model1))
# light_animals <- animals[animals$Body_Weight_kg < 1000, ]
plot(animals$Body_Weight_kg, animals$Brain_Weight)
# hard to assess the relationship without performing transformation
plot(animals$Body_Weight_kg, animals$Brain_Weight,
xlim=c(0, 500), ylim=c(0, 1500))
# 1c
best_BIC <- lm(y ~ x1 + x2 + x3 + x4 + x6 + x10 + x4:x10,
data = mydata.new)
which.max(chem$y)
predict(best_BIC, newdata=mydata[17,],
interval="confidence", )
predict(best_BIC, newdata=mydata.new[17,],
interval="confidence", )
# R-squared increased (better model fit)
# Multiple R-squared:  0.7845,	Adjusted R-squared:  0.7768
# scatter plot
plot(log(animals$Body_Weight_kg), log(animals$Brain_Weight))
# 2h
plot(log(animals$Body_Weight_kg),
log(animals$Brain_Weight),
pch=(animals$Species_Code + 20))
model4 <- lm(log(Brain_Weight)~log(Body_Weight_kg) + as.factor(Species_Code),
data=animals)
summary(model4)
# R-squared increased (better model fit)
# Multiple R-squared:  0.7845,	Adjusted R-squared:  0.7768
# scatter plot
plot(log(animals$Body_Weight_kg), log(animals$Brain_Weight))
plot(log(animals$Body_Weight_kg),
log(animals$Brain_Weight),
pch=(animals$Species_Code + 20))
# residual plot is better
plot(model3)
# 2f
model3 <- lm(log(Brain_Weight)~log(Body_Weight_kg), data=animals)
# residual plot is better
plot(model3)
final_model <- lm(y~x1+x2+x3+x10, data = mydata.new)
summary(final_model)
mydata.new$y <- mydata.new$y^(-1)
final_model <- lm(y~x1+x2+x3+x10, data = mydata.new)
summary(final_model)
chem_lm <- lm(y~., data=chem)
summary(chem_lm)
# x5 is excluded: perfect linear collinearity with another var
summary(lm(x5~., data=chem))
mydata.new <- chem[, -5]
attach(mydata.new)
all_subset_Cp = leaps(x=mydata.new[, -10], y=y, method="Cp")
ind <- which.min(all_subset_Cp$Cp)
ind
all_subset_Cp$which[ind,]
names(mydata.new[, -10])
best_model <- lm(y~x1+x2+x3+x10, data=mydata.new)
summary(best_model)
# check residual plot
plot(best_model)
mydata.new$y <- mydata.new$y^(-1)
final_model <- lm(y~x1+x2+x3+x10, data = mydata.new)
summary(final_model)
model1 <- lm(Brain_Weight~Body_Weight_kg, data=animals)
abline(model1)
summary(model1)
predict(best_BIC, newdata=mydata.new[17,],
interval="confidence", )
predict(best_BIC, newdata=mydata.new[17,],
interval="confidence", level = 0.9)
which.max(chem$y)
predict(best_BIC, newdata=mydata.new[17,],
interval="confidence", level = 0.9)
predict(best_BIC, newdata=mydata.new[17,],
interval="confidence", level = 0.90)
summary(best_BIC)
# Question 1
# 1a
chem <- read.table(file.choose(),header=TRUE)
full_lm <- lm(y~., data=chem)
summary(full_lm)
coefs(full_lm)
full_lm.coefs
full_lm.coefs()
?coef
coef(full_lm)
full_lm <- lm(y~., data=chem)
coef(full_lm)
coef(full_lm)
coef(full_lm)
# x5 is excluded: perfect linear collinearity with another var
summary(lm(x5~., data=chem))
# x5 is excluded: perfect linear collinearity with another var
lm(x5~., data=chem)$r.squared
# x5 is excluded: perfect linear collinearity with another var
summary(lm(x5~., data=chem))$r.squared
mydata.new <- chem[, -5]
all_subset_Cp = leaps(x=mydata.new[, -10], y=y, method="Cp")
ind <- which.min(all_subset_Cp$Cp)
all_subset_Cp$which[ind,]
names(mydata.new[, -10])
best_Cp <- lm(y~x1+x2+x3+x10, data=mydata.new)
summary(best_model)
summary(best_Cp)
# check residual plot
plot(best_model)
# check residual plot
plot(best_Cp)
# box-cox transformation
boxcox(best_model)
# box-cox transformation
boxcox(best_Cp)
final_model <- lm(y^(-1)~x1+x2+x3+x10, data = mydata.new)
summary(final_model) # intercept -9.195
final_model <- lm(y^(-1)~x1+x2+x3+x10, data = mydata.new)
plot(final_model)
plot(final_model)
summary(final_model)
# 1b
lm.additive <- lm(y~.,data=mydata.new)
# for AIC (k = 2)
step(lm.additive,.~.^2,direction="both",k=2)
n <- dim(mydata.new)[1]
step(lm.additive,.~.^2,direction="both",k=log(n))
best_BIC <- lm(y ~ x1 + x2 + x3 + x4 + x6 + x10 + x4:x10,
data = mydata.new)
which.max(chem$y)
predict(best_BIC, newdata=mydata.new[17,],
interval="confidence", level = 0.90)
summary(best_BIC)
n <- dim(mydata.new)[1]
step(lm.additive,.~.^2,direction="both",k=log(n))
# for AIC (k = 2)
step(lm.additive,.~.^2,direction="both",k=2)
predict(best_BIC, newdata=mydata.new[17,],
interval="confidence", level = 0.90)
# Question 2
animals <- read.csv(file.choose(),header=TRUE)
# 2a
animals$Body_Weight_kg <- animals$Body_Weight / 1000
plot(animals$Body_Weight_kg, animals$Brain_Weight)
plot(animals$Body_Weight_kg, animals$Brain_Weight,
xlim=c(0, 500), ylim=c(0, 1500))
# 2b
model1 <- lm(Brain_Weight~Body_Weight_kg, data=animals)
plot(animals$Body_Weight_kg, animals$Brain_Weight)
abline(model1)
summary(model1)
# 2c
scatter.smooth(residuals(model1)~predict(model1))
# seems to be at least one outlying observation.
# the residuals vs. fitted values plot indicates that the
# constant variance assumption is violated.
# try to zoom in
scatter.smooth(residuals(model1)~predict(model1),
xlim=c(400, 500), ylim=c(-500, 1500))
# 2d
which.max(animals$Body_Weight_kg > 10000)
animals[19,] # blue whale
max_ind <- which.max(animals$Body_Weight_kg > 10000)
animals[max_ind,] # blue whale
predict(model1, newdata=animals[19,])
animals[max_ind,] # blue whale
# 2e
boxcox(model1)
summary(model2)
# use lambda = 0, --> apply a log transformation
model2 <- lm(log(Brain_Weight)~Body_Weight_kg, data=animals)
summary(model2)
3.406e+00
1.047e-04
# 2f
model3 <- lm(log(Brain_Weight)~log(Body_Weight_kg), data=animals)
summary(model3)
# R-squared decreased (worse model fit)
# Multiple R-squared:  0.133,	Adjusted R-squared:  0.1021
plot(animals$Body_Weight_kg, log(animals$Brain_Weight))
abline(model2)
model3 <- lm(log(Brain_Weight)~log(Body_Weight_kg), data=animals)
summary(model3)
plot(log(animals$Body_Weight_kg), log(animals$Brain_Weight))
abline(model3)
# residual plot is better
plot(model3)
> plot(model3)
plot(model3)
# residual plot is much better!
scatter.smooth(residuals(model3)~predict(model3))
plot(log(animals$Body_Weight_kg),
log(animals$Brain_Weight),
pch=(animals$Species_Code + 20))
abline(model3)
# use Species_Code as a predictor
model4 <- lm(log(Brain_Weight)~log(Body_Weight_kg) + as.factor(Species_Code),
data=animals)
summary(model4)
all_relevant <- read.csv("all_relevant.csv")
getwd()
setwd("/Users/annalieb/Thesis/Senior-Thesis")
setwd("Thesis/Senior-Thesis")
setwd("Documents/Thesis/Senior-Thesis")
all_relevant <- read.csv("all_relevant.csv")
# look at common domains
table(all_relevant$domain)
dim(table(all_relevant$domain))
# look at common domains
table(all_relevant$domain)[table(all_relevant$domain) > 5]
dim(table(all_relevant$domain)[table(all_relevant$domain) > 5])
dim(table(all_relevant$domain)[table(all_relevant$domain) > 10])
dim(table(all_relevant$domain)[table(all_relevant$domain) > 20])
dim(table(all_relevant$domain)[table(all_relevant$domain) > 50])
# look at common domains
table(all_relevant$domain)[table(all_relevant$domain) > 50]
# look at common domains
table(all_relevant$domain)[table(all_relevant$domain) > 100]
# look at common domains
table(all_relevant$domain)[table(all_relevant$domain) > 200]
table(all_relevant$domain)[table(all_relevant$domain) > 150]
names(common_domains)
which(common_domains == 169)
# look at common domains
common_domains <- table(all_relevant$domain)[table(all_relevant$domain) > 200]
names(common_domains)
# Create a bar plot using barplot()
barplot(na_counts, col = "darkblue",
names.arg = names(common_domains),
ylab = "Count", las = 2, main = "Most common domains")
# Create a bar plot using barplot()
barplot(common_domains, col = "darkblue",
names.arg = names(common_domains),
ylab = "Count", las = 2, main = "Most common domains")
# Create a bar plot using barplot()
barplot(common_domains, col = "darkblue",
names.arg = names(common_domains),
ylab = "Count", las = 2, main = "Most common domains")
# Create a bar plot using barplot()
barplot(common_domains, col = "darkblue",
names.arg = names(common_domains), horiz = TRUE,
ylab = "Count", las = 2, main = "Most common domains")
# Create a bar plot using barplot()
barplot(common_domains, col = "darkblue",
names.arg = names(common_domains), horiz = TRUE,
ylab = "Count", main = "Most common domains")
# Create a bar plot using barplot()
barplot(common_domains, col = "darkblue",
names.arg = names(common_domains),
ylab = "Count", las = 2, main = "Most common domains")
?barplot
# Create a bar plot using barplot()
barplot(common_domains, col = "darkblue",
names.arg = names(common_domains),
ylab = "Count", cex.names=.5, main = "Most common domains")
# Create a bar plot using barplot()
barplot(common_domains, col = "darkblue", horiz=TRUE,
names.arg = names(common_domains),
ylab = "Count", cex.names=.5, main = "Most common domains")
# Create a bar plot using barplot()
barplot(common_domains, col = "darkblue",
names.arg = names(common_domains),
ylab = "Count", cex.names=.5, main = "Most common domains")
# Create a bar plot using barplot()
barplot(common_domains, col = "darkblue",
names.arg = names(common_domains),
ylab = "Count", cex.names=.5, las=2, main = "Most common domains")
# Create a bar plot using barplot()
barplot(common_domains, col = "darkblue", horiz = TRUE,
names.arg = names(common_domains),
ylab = "Count", cex.names=.5, las=2, main = "Most common domains")
# Create a bar plot using barplot()
barplot(common_domains, col = "darkblue",
names.arg = names(common_domains),
ylab = "Count", cex.names=.5, las=2, main = "Most common domains")
library(ggplot2)
data <- data.frame(counts = common_domains,
domains = names(common_domains))
# creating a bot plot
ggplot(data, aes(UID, value)) +
geom_bar(stat = "identity")
# creating a bot plot
ggplot(data, aes(domains, counts)) +
geom_bar(stat = "identity")
data <- data.frame(counts = common_domains,
domains = names(common_domains))
# creating a bot plot
ggplot(data, aes(domains, counts)) +
geom_bar(stat = "identity")
rlang::last_trace()
head(data)
# creating a bot plot
ggplot(data, aes(common_domains, names(common_domains))) +
geom_bar(stat = "identity")
# creating a bot plot
ggplot(data, aes(common_domains, names(common_domains))) +
geom_bar(stat = "identity", fill="steelblue") +
theme(axis.text.x = element_text(angle = 90, size = 10))
# creating a bot plot
ggplot(data, aes(common_domains, names(common_domains))) +
geom_bar(stat = "identity", fill="steelblue") +
theme(axis.text.x = element_text(angle = 90, size = 10))
# creating a bot plot
ggplot(data, aes(common_domains, names(common_domains))) +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains",
x ="Domain", y = "Count")
common_domains <- table(all_relevant$domain)[table(all_relevant$domain) > 150]
# make barplot
head(data)
# creating a bot plot
ggplot(data, aes(common_domains, names(common_domains))) +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains",
x ="Domain", y = "Count")
# look at common domains
common_domains <- table(all_relevant$domain)[table(all_relevant$domain) > 150]
# make barplot
ggplot(data, aes(common_domains, names(common_domains))) +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains",
x ="Domain", y = "Count")
ggplot(data, aes(common_domains, names(common_domains))) +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains",
x ="Domain", y = "Count")
# Create a bar plot
ggplot(data, aes(common_domains, names(common_domains))) +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
common_domains
# Create a bar plot
ggplot(common_domains, aes(common_domains, names(common_domains))) +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
# Create a bar plot
data <- data.frame(common_domains)
head(data)
ggplot(data, aes(Var1, Freq)) +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
ggplot(data, aes(Var1, Freq)) +
coord_flip() +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
?arrange
data %>% arrange(desc(Freq))
data %>%
arrange(desc(Freq))
# Create a bar plot
data <- data.frame(common_domains)  %>% arrange(desc(Freq))
library(dplyr)
# Create a bar plot
data <- data.frame(common_domains)%>% arrange(desc(Freq))
ggplot(data, aes(Var1, Freq)) +
coord_flip() +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
data %>% arrange(desc(Freq))
ggplot(data, aes(Var1, Freq)) +
coord_flip() +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
# Create a bar plot
data <- data.frame(common_domains) %>% arrange(desc(Freq))
data
ggplot(data, aes(Var1, Freq)) +
coord_flip() +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
ggplot(data, aes(x = reorder(Var1, -Freq), y= Freq)) +
coord_flip() +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
# Create a bar plot
data <- data.frame(common_domains)
ggplot(data, aes(x = reorder(Var1, -Freq), y= Freq)) +
coord_flip() +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
ggplot(data, aes(x = reorder(Var1, Freq), y= Freq)) +
coord_flip() +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
# view the articles with lots of repeats
repeats <- all_relevant[all_relevant$max_reps > 1,]
dim(repeats)
setwd("Documents/Thesis/Senior-Thesis")
all_relevant <- read.csv("all_relevant.csv")
# get max number of repetitions in a given search result list
# (ie. a single state or in the national results)
max_reps <- apply(all_relevant[,6:55], 1, max)
all_relevant$max_reps <- max_reps
hist(all_relevant$max_reps)
summary(all_relevant$max_reps)
repeats <- all_relevant[all_relevant$max_reps > 1,]
dim(repeats)
summary(repeats$max_reps)
all_relevant$title[all_relevant$max_reps > 50]
ggplot(data, aes(x = reorder(title, max_reps), y= max_reps)) +
coord_flip() +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
length(repeats[repeats$max_reps > 2, "title"])
all_relevant$title[all_relevant$max_reps > 50]
# Create a bar plot
data <- all_relevant[all_relevant$max_reps > 50,]
ggplot(data, aes(x = title, y= max_reps)) +
coord_flip() +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
ggplot(data, aes(x = reorder(title, max_reps), y= max_reps)) +
coord_flip() +
geom_bar(stat = "identity", fill="steelblue") +
labs(title="Most common domains", x ="Domain", y = "Count")
